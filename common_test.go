package sqls

import (
	"fmt"
	"testing"
)

func TestParams(t *testing.T) {
	SetDialect(DefaultDialect)

	var tests = []struct {
		start, count int
		want         string
	}{
		{1, 1, "@1"},
		{1, 3, "@1,@2,@3"},
		{3, 7, "@3,@4,@5,@6,@7,@8,@9"},
		{1, 10, "@1,@2,@3,@4,@5,@6,@7,@8,@9,@10"},
		{1, 12, "@1,@2,@3,@4,@5,@6,@7,@8,@9,@10,@11,@12"},
		{6, 14, "@6,@7,@8,@9,@10,@11,@12,@13,@14,@15,@16,@17,@18,@19"},
		{9, 12, "@9,@10,@11,@12,@13,@14,@15,@16,@17,@18,@19,@20"},
		{10, 17, "@10,@11,@12,@13,@14,@15,@16,@17,@18,@19,@20,@21,@22,@23,@24,@25,@26"},
		{1, 99, "@1,@2,@3,@4,@5,@6,@7,@8,@9,@10,@11,@12,@13,@14,@15,@16,@17,@18,@19,@20,@21,@22,@23,@24,@25,@26,@27,@28,@29,@30,@31,@32,@33,@34,@35,@36,@37,@38,@39,@40,@41,@42,@43,@44,@45,@46,@47,@48,@49,@50,@51,@52,@53,@54,@55,@56,@57,@58,@59,@60,@61,@62,@63,@64,@65,@66,@67,@68,@69,@70,@71,@72,@73,@74,@75,@76,@77,@78,@79,@80,@81,@82,@83,@84,@85,@86,@87,@88,@89,@90,@91,@92,@93,@94,@95,@96,@97,@98,@99"},
		{1, 100, "@1,@2,@3,@4,@5,@6,@7,@8,@9,@10,@11,@12,@13,@14,@15,@16,@17,@18,@19,@20,@21,@22,@23,@24,@25,@26,@27,@28,@29,@30,@31,@32,@33,@34,@35,@36,@37,@38,@39,@40,@41,@42,@43,@44,@45,@46,@47,@48,@49,@50,@51,@52,@53,@54,@55,@56,@57,@58,@59,@60,@61,@62,@63,@64,@65,@66,@67,@68,@69,@70,@71,@72,@73,@74,@75,@76,@77,@78,@79,@80,@81,@82,@83,@84,@85,@86,@87,@88,@89,@90,@91,@92,@93,@94,@95,@96,@97,@98,@99,@100"},
		{28, 56, "@28,@29,@30,@31,@32,@33,@34,@35,@36,@37,@38,@39,@40,@41,@42,@43,@44,@45,@46,@47,@48,@49,@50,@51,@52,@53,@54,@55,@56,@57,@58,@59,@60,@61,@62,@63,@64,@65,@66,@67,@68,@69,@70,@71,@72,@73,@74,@75,@76,@77,@78,@79,@80,@81,@82,@83"},
		{99, 6, "@99,@100,@101,@102,@103,@104"},
		{100, 5, "@100,@101,@102,@103,@104"},
		{501, 3, "@501,@502,@503"},
		{841, 1, "@841"},
		{840, 2, "@840,@841"},
		{840, 3, "@840,@841,@842"},
		{998, 5, "@998,@999,@1000,@1001,@1002"},
		{999, 1, "@999"},
	}

	for _, tt := range tests {
		name := fmt.Sprintf("params %d:%d", tt.start, tt.count)

		t.Run(name, func(t *testing.T) {
			got := params(tt.start, tt.count)

			if got != tt.want {
				t.Errorf("want '%s', got '%s'", tt.want, got)
			}
		})
	}
}
